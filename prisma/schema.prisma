generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?     @map("email_verified")
  image          String?
  roles          String?
  accounts       Account[]
  sessions       Session[]
  foundObjects   FoundObject[] @relation("found")
  claimedObjects FoundObject[] @relation("claimed")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Campus {
  id        Int        @id @default(autoincrement())
  name      String
  locations Location[]

  @@unique([name])
  @@map("campus")
}

model Location {
  id           Int           @id @default(autoincrement())
  campusId     Int           @map("campus_id")
  name         String
  foundObjects FoundObject[]

  campus Campus @relation(fields: [campusId], references: [id], onDelete: Cascade)

  @@unique([campusId, name])
  @@map("location")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  foundObjects FoundObject[]

  @@unique([name])
  @@map("category")
}

model FoundObject {
  id              Int      @id @default(autoincrement())
  locationId      Int      @map("location_id")
  categoryId      Int      @map("category_id")
  reportingUserId String   @map("reporting_user_id")
  dateFound       DateTime @map("date_found")
  image           String
  comments        String?
  status          Status   @default(UNCLAIMED)
  claimedById     String?  @map("claimed_user_id")
  is_deleted       Boolean  @default(false)

  location      Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  reportingUser User     @relation("found", fields: [reportingUserId], references: [id], onDelete: Cascade)
  claimedByUser User?    @relation("claimed", fields: [claimedById], references: [id], onDelete: Cascade)

  @@map("foundobject")
}

enum Status {
  UNCLAIMED
  CLAIMED
}
